const int n_skip = 1;  //Number of time steps to skip between snapshots of the array being saved to files
const fftw_complex imag_time = I;   //Defines whether the program runs in real time

//Spatial array sizes
const ptrdiff_t x_size = 128;
const ptrdiff_t y_size = 128;
const ptrdiff_t z_size = 128;

//GPE Constants
const double pi = 3.14159265;
const double epsilon = 1;
const double epsilon1 = 0.25;
const double Kd = 0;
const double gammay = 1;
const double gammaz = 1;

//Time and Space discretization intervals and the total time for which the simulation will run
const double dt = 0.01;
const double dx = 0.0625;
const double endt = 5;

//Constants for decreasing the resolution and dimension of the array for exporting purposes.

const int x_red_factor = 2;
const int y_red_factor = 2;
const int z_red_factor = 128;

void psi_init(fftw_complex* psi, double* x, double* y, double* z, ptrdiff_t local_x_size){
    //Defines the 3D ground state solution to the quantum harmonic oscilator
    
    int i, j, k;
    double prefactor = pow(gammay*gammaz, 0.25)/pow(pi*epsilon1, 0.75);
    for(i = 0; i < local_x_size; i++){
        for(j = 0; j < y_size; j++){
            for(k = 0; k < z_size; k++){
                psi[k + z_size * (j + y_size * i)] = 1;
                //prefactor * exp(-(pow(x[i], 2) + gammay*pow(y[j],2) + gammaz*pow(z[k], 2))/(2*epsilon1));
            }
        }
    }
}